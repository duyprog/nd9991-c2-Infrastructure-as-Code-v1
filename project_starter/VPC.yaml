AWSTemplateFormatVersion: 2010-09-09
Description: > 
  This template is used to create VPC in Region with CIDR: 10.0.0.0/16

Parameters: 
  EnvironmentName: 
    Description: An Environment name that will be prefix to resource
    Type: String
    Default: Udacity-Project
  VPCCidr: 
    Description: A CIDR block of Main VPC
    Type: String
    Default: 10.0.0.0/16
  PublicSubnet1Cidr: 
    Description: A CIDR block of Public Subnet 1 
    Type: String
    Default: 10.0.0.0/24
  PublicSubnet2Cidr: 
    Description: A CIDR block of Public Subnet 2
    Type: String
    Default: 10.0.1.0/24    
  PrivateSubnet1Cidr: 
    Type: String
    Description: A CIDR block of Private Subnet 1
    Default: 10.0.2.0/24
  PrivateSubnet2Cidr: 
    Type: String
    Description: A CIDR block of Private Subnet 2
    Default: 10.0.3.0/24

Resources: 

  # Create VPC 
  MainVPC: 
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref VPCCidr
      EnableDnsHostnames: true
      Tags: 
        - Key: Environment
          Value: !Ref EnvironmentName
  # Create Internet Gateway internet access 
  InternetGateway: 
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags: 
        - Key: Environment
          Value: !Ref EnvironmentName
  # Attach Internet Gateway to VPC 
  InternetGatewayAttachment: 
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      VpcId: !Ref MainVPC
      InternetGatewayId: !Ref InternetGateway

# Create Public Subnet
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVPC
      CidrBlock: !Ref PublicSubnet1Cidr
      AvailabilityZone: !Select
        - 0 
        - Fn::GetAZs: !Ref 'AWS::Region'
      MapPublicIpOnLaunch: true
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVPC
      CidrBlock: !Ref PublicSubnet2Cidr
      AvailabilityZone: !Select
        - 1 
        - Fn::GetAZs: !Ref 'AWS::Region'
      MapPublicIpOnLaunch: true

# Create Private Subnet
  PrivateSubnet1: 
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref MainVPC
      CidrBlock: !Ref PrivateSubnet1Cidr
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      MapPublicIpOnLaunch: false
  PrivateSubnet2: 
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref MainVPC
      CidrBlock: !Ref PrivateSubnet2Cidr
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      MapPublicIpOnLaunch: false

# Create EIP to associate with Nat Gateway
  NatGateway1EIP: 
    Type: AWS::EC2::EIP
    Properties: 
      Domain: vpc
  
  NatGateway2EIP: 
    Type: AWS::EC2::EIP
    Properties: 
      Domain: vpc
  # Create Nat Gateway for access internet from private subnet
  NatGateway1: 
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
  
  NatGateway2: 
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2

  # Public Route table
  PublicRouteTable: 
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref MainVPC
      Tags: 
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Route Table
  
  # Route for route table 
  DefaultPublicRoute: 
    Type: AWS::EC2::Route
    Properties: 
      RouteTableId: !Ref PublicRouteTable 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  # Associate 2 public subnet with public route table
  PublicSubnet1Association: 
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2Association: 
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # Create Private Route table 
  PrivateRouteTable1: 
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref MainVPC
      Tags: 
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Route Table 1

  PrivateRoute1: 
    Type: AWS::EC2::Route
    Properties: 
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1Association: 
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1
  
  PrivateRouteTable2: 
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref MainVPC
      Tags: 
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Route Table 2 
  
  PrivateRoute2: 
    Type: AWS::EC2::Route
    Properties: 
      RouteTableId: !Ref PrivateRouteTable2
      NatGatewayId: !Ref NatGateway2
      DestinationCidrBlock: 0.0.0.0/0

  PrivateSubnet2Association: 
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

Outputs: 
  VPC: 
    Description: A reference to the created VPC 
    Value: !Ref MainVPC 
    Export: 
      Name: !Sub ${EnvironmentName}-VPCID
  PublicSubnets: 
    Description: A list of Public Subnets    
    Value: !Join [",", [!Ref PublicSubnet1, !Ref PublicSubnet2]]
    Export: 
      Name: !Sub ${EnvironmentName}-PUB-NETS
  PrivateSubnets: 
    Description: A list of Private Subnets
    Value: !Join [",", [!Ref PrivateSubnet1, !Ref PrivateSubnet2]]
    Export: 
      Name: !Sub ${EnvironmentName}-PRIV-NETS
  
  PublicSubnet1: 
    Description: Public Subnet 1 
    Value: !Ref PublicSubnet1
    Export: 
      Name: !Sub ${EnvironmentName}-PUB-NET1
  PublicSubnet2: 
    Description: Public Subnet 2
    Value: !Ref PublicSubnet2
    Export: 
      Name: !Sub ${EnvironmentName}-PUB-NET2
  



      